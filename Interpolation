import numpy as np
from scipy import interpolate
import matplotlib.pyplot as plt


### 1D Interpolation


'''
# y = 3x**2 - exp(0.1*x) base data

# Known points setting. 
x = np.linspace(0,100,10)
y = 3*x**2 - np.exp(0.1*x)

# This is the point we want to know. (unknown point)
x1 = np.linspace(0,100,100)

# Interpolation method lists. They are the most popular 4 methods.
kind = ['zero', 'slinear', 'quadratic', 'cubic']


fig = plt.figure()
ax = fig.subplots()
for i in kind:
      # compute interpolate function with known points.
      f = interpolate.interp1d(x, y, kind = i)
      # compute unknown values with the function f and unknown points x1
      y_interp = f(x1)
      ax.plot(x1, y_interp, alpha = 0.5, label = i)
ax.scatter(x,y)
plt.legend()
plt.show()
'''





### 2D Interpolation


'''
# z = x**2 - 2*y**2 + exp(0.1*x*y) base data

# Known points setting
x = np.linspace(-5,5, 50)
y = np.linspace(-3,3, 20)
X ,Y = np.meshgrid(x ,y) # Generate meshgrid
Z = X**2 - 2*Y**2 + np.exp(0.1*X*Y)

# Unkown points setting
x1 = np.linspace(-5,5,200)
y1 = np.linspace(-3,3,150)
X1 , Y1 = np.meshgrid(x1 , y1)

# compute interpolation function with known points
f = interpolate.interp2d(x ,y, Z, kind='cubic')
# compute unknown values with the function f and unknown points x1 
Z1 = f(x1, y1)

#Plotting
fig = plt.figure()
ax = fig.subplots(1,2)
ax[0].pcolormesh(X, Y, Z)
ax[1].pcolormesh(X1, Y1, Z1)
plt.show()
'''
